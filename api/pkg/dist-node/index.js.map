{"version":3,"file":"index.js","sources":["../dist-src/services/authentication.js","../dist-src/services/encryption.js","../dist-src/services/vehicle.js","../dist-src/routes/readiness.js","../dist-src/routes/general/status.js","../dist-src/routes/general/version.js","../dist-src/routes/login.js","../dist-src/index.js"],"sourcesContent":["import Logger from '@harmonyjs/logger';\nfunction AuthenticationService() {\n    const instance = ({\n        logger: Logger({ name: 'Authentication', configuration: { console: true } }),\n        account: null,\n        configure(account) {\n            this.account = account;\n        },\n        async authenticateAccount(args) {\n            try {\n                // Decode JSON\n                const decoded = await args.req.jwtVerify();\n                if (decoded?.payload?.userId) {\n                    // Verify account is present\n                    if ((!this.account) || (decoded.payload.userId === this.account.id)) {\n                        const user = this.account;\n                        return Object.assign(args.req, { user });\n                    }\n                }\n                // Error\n                return args.res.code(500).send({\n                    statusCode: 500,\n                    error: 'Internal Server Error',\n                });\n            }\n            catch (e) {\n                return args.res.code(401).send({\n                    statusCode: 401,\n                    error: 'Credentials invalid',\n                    message: e.message,\n                });\n            }\n        },\n    });\n    return instance;\n}\nexport default AuthenticationService();\n","// @ts-ignore\nimport aes256 from \"aes256\";\nfunction EncryptionService() {\n    const instance = {\n        secret: \"\",\n        configure(configuration) {\n            this.secret = configuration.secret;\n        },\n        encryptPassword(args) {\n            return aes256\n                .encrypt(this.secret, args.password + args.salt)\n                .toString();\n        },\n        comparePassword(args) {\n            return (aes256.decrypt(this.secret, args.encrypted) ===\n                args.password + args.salt);\n        },\n    };\n    return instance;\n}\nexport default EncryptionService();\n","import polyline from \"@mapbox/polyline\";\nimport turf from \"@turf/turf\";\nimport moment from \"moment\";\nimport Logger from \"@harmonyjs/logger\";\nconst UPDATE_INTERVAL = 1000;\nconst SPEED_VARIATION = 2;\nconst TEMPERATURE_VARIATION = 1;\nfunction VehicleService() {\n    const instance = {\n        logger: Logger({ name: \"Vehicle\", configuration: { console: true } }),\n        vehicles: [],\n        configure(vehicles) {\n            // Initialize vehicles\n            this.initializeVehicles(vehicles);\n            // Update vehicles\n            setInterval(() => this.updateVehicles(), UPDATE_INTERVAL);\n        },\n        initializeVehicles(vehicles) {\n            this.vehicles = vehicles.map((vehicle) => {\n                const coordinates = polyline.decode(vehicle.polyline);\n                const line = turf.lineString(coordinates);\n                const options = { units: \"meters\" };\n                const location = turf.along(line, 0, options);\n                return {\n                    ...vehicle,\n                    defaultSpeed: vehicle.speed,\n                    defaultTemperature: vehicle.temperature,\n                    location: location.geometry.coordinates,\n                    line,\n                    distance: 0,\n                };\n            });\n        },\n        updateVehicles() {\n            this.vehicles.forEach((vehicle) => {\n                // Update only if vehicle is active\n                if (vehicle.online) {\n                    vehicle.updatedAt = moment().toISOString();\n                    // Update vehicle position\n                    const options = { units: \"meters\" };\n                    const location = turf.along(vehicle.line, vehicle.distance, options);\n                    vehicle.location = location.geometry.coordinates;\n                    // Increment traveled distance\n                    const metersTraveled = vehicle.defaultSpeed / 3.6;\n                    vehicle.distance += metersTraveled;\n                    // Reinitialize position at end of route\n                    const routeLength = turf.length(vehicle.line, {\n                        units: \"meters\",\n                    });\n                    if (vehicle.distance >= routeLength) {\n                        vehicle.distance = 0;\n                    }\n                    // Random speed\n                    const minSpeed = vehicle.defaultSpeed - SPEED_VARIATION;\n                    const maxSpeed = vehicle.defaultSpeed + SPEED_VARIATION;\n                    vehicle.speed = Math.floor(Math.random() * (maxSpeed - minSpeed + 1) + minSpeed);\n                    // Random temperature\n                    const minTemp = vehicle.defaultTemperature - TEMPERATURE_VARIATION;\n                    const maxTemp = vehicle.defaultTemperature + TEMPERATURE_VARIATION;\n                    vehicle.temperature = Math.floor(Math.random() * (maxTemp - minTemp + 1) + minTemp);\n                }\n                else {\n                    vehicle.speed = 0;\n                }\n            });\n        },\n        getDrivers() {\n            return this.vehicles;\n        },\n        updateVehicleStatus(id, status) {\n            const idx = this.vehicles.findIndex((i) => i.id == id);\n            if (idx !== -1) {\n                this.vehicles[idx].online = status;\n            }\n        },\n        updateVehicle(id, payload) {\n            const idx = this.vehicles.findIndex((i) => i.id == id);\n            if (idx !== -1) {\n                this.vehicles[idx] = { ...this.vehicles[idx], ...payload };\n            }\n        },\n    };\n    return instance;\n}\nexport default VehicleService();\n","const ReadinessRoute = {\n    method: \"GET\",\n    url: \"/\",\n    async handler() {\n        return true;\n    },\n};\nexport default ReadinessRoute;\n","const GeneralStatusRoute = {\n    method: \"GET\",\n    url: \"/general/status\",\n    async handler() {\n        const response = {\n            environment: \"PRODUCTION\",\n            status: \"OK\",\n        };\n        return response;\n    },\n};\nexport default GeneralStatusRoute;\n","const GeneralVersionRoute = {\n    method: \"GET\",\n    url: \"/general/version\",\n    async handler() {\n        const response = {\n            buildDate: \"17/05/2020 19:00:00 +02:00\",\n            buildVersion: \"1.0.0\",\n            apiVersion: \"v1\",\n        };\n        return response;\n    },\n};\nexport default GeneralVersionRoute;\n","import VehicleService from '../services/vehicle'\nimport Logger from \"@harmonyjs/logger\";\nimport EncryptionService from '../services/encryption'\nconst logger = Logger({\n    name: \"AccountLogin\",\n    configuration: {\n        console: true,\n    },\n});\nconst LoginRoute = async (server, opts, next) => {\n    server.route({\n        method: \"POST\",\n        url: \"/login\",\n        async handler(req, res) {\n            try {\n                //validate body login, password here\n                if (!req.body || !req.body.login || !req.body.password) {\n                    throw new Error(\"wrong_credentials\");\n                }\n                //get login and password from body\n                const { login, password } = req.body;\n                //get db account from server\n                const { account } = req.conf;\n                // check exist db\n                if (!account) {\n                    return res\n                        .code(500)\n                        .send({ error: \"Internal Server Error\" });\n                }\n                //verify email\n                if (account[\"email\"] != login) {\n                    return res.code(401).send({\n                        error: \"Bad Request\",\n                        message: \"user_not_found\",\n                    });\n                }\n                //compare password\n                if (!EncryptionService.comparePassword({\n                    password: password,\n                    salt: account[\"id\"],\n                    encrypted: account[\"password\"],\n                })) {\n                    return res.code(401).send({\n                        error: \"Bad Request\",\n                        message: \"wrong_credentials\",\n                    });\n                }\n                const payload = {\n                    userId: account.id,\n                    name: account.name,\n                    isAdmin: false,\n                };\n                const token = server.jwt.sign({ payload });\n                return res.code(200).send({ token });\n            }\n            catch (error) {\n                if (!error.message) {\n                    return res\n                        .code(500)\n                        .send({ error: \"Internal Server Error\" });\n                }\n                return res\n                    .code(401)\n                    .send({ error: \"Bad Request\", message: error.message });\n            }\n            // FIXME\n        },\n    });\n    server.route({\n        method: \"GET\",\n        url: \"/vehicles\",\n        preHandler: server.auth([server.authenticateAccount]),\n        async handler(req, res) {\n            try {\n                const data = VehicleService.getDrivers();\n                return res.code(200).send({ data });\n            }\n            catch (error) {\n                if (!error.message) {\n                    return res\n                        .code(500)\n                        .send({ error: \"Internal Server Error\" });\n                }\n                return res\n                    .code(401)\n                    .send({ error: \"Bad Request\", message: error.message });\n            }\n            // FIXME\n        },\n    });\n    server.route({\n        method: \"POST\",\n        url: \"/vehicles/online/:id_of_vehicle\",\n        preHandler: server.auth([server.authenticateAccount]),\n        async handler(req, res) {\n            try {\n                VehicleService.updateVehicles();\n                const vehicles = VehicleService.vehicles || [];\n                const findIndex = vehicles.findIndex((i) => i.id === req.params.id_of_vehicle);\n                if (findIndex === -1) {\n                    throw new Error();\n                }\n                VehicleService.updateVehicleStatus(vehicles[findIndex].id, true);\n                return res.code(200).send({});\n            }\n            catch (error) {\n                if (!error.message) {\n                    return res\n                        .code(500)\n                        .send({ error: \"Internal Server Error\" });\n                }\n                return res\n                    .code(401)\n                    .send({ error: \"Bad Request\", message: error.message });\n            }\n            // FIXME\n        },\n    });\n    server.route({\n        method: \"POST\",\n        url: \"/vehicles/offline/:id_of_vehicle\",\n        preHandler: server.auth([server.authenticateAccount]),\n        async handler(req, res) {\n            try {\n                VehicleService.updateVehicles();\n                const vehicles = VehicleService.vehicles || [];\n                const findIndex = vehicles.findIndex((i) => i.id === req.params.id_of_vehicle);\n                if (findIndex === -1) {\n                    throw new Error();\n                }\n                VehicleService.updateVehicleStatus(vehicles[findIndex].id, false);\n                return res.code(200).send({});\n            }\n            catch (error) {\n                if (!error.message) {\n                    return res\n                        .code(500)\n                        .send({ error: \"Internal Server Error\" });\n                }\n                return res\n                    .code(401)\n                    .send({ error: \"Bad Request\", message: error.message });\n            }\n            // FIXME\n        },\n    });\n    server.route({\n        method: \"PUT\",\n        url: \"/vehicles/plate/:id_of_vehicle\",\n        preHandler: server.auth([server.authenticateAccount]),\n        async handler(req, res) {\n            try {\n                if (!req.body[\"plate\"]) {\n                    throw new Error(\"wrong_credentials\");\n                }\n                VehicleService.updateVehicles();\n                const vehicles = VehicleService.vehicles || [];\n                const findIndex = vehicles.findIndex((i) => i.id === req.params.id_of_vehicle);\n                if (findIndex === -1) {\n                    throw new Error();\n                }\n                VehicleService.updateVehicle(vehicles[findIndex].id, {\n                    plate: req.body[\"plate\"],\n                });\n                return res.code(200).send({});\n            }\n            catch (error) {\n                if (!error.message) {\n                    return res\n                        .code(500)\n                        .send({ error: \"Internal Server Error\" });\n                }\n                return res\n                    .code(401)\n                    .send({ error: \"Bad Request\", message: error.message });\n            }\n            // FIXME\n        },\n    });\n    server.route({\n        method: \"PUT\",\n        url: \"/vehicles/:id_of_vehicle\",\n        preHandler: server.auth([server.authenticateAccount]),\n        async handler(req, res) {\n            try {\n                if (!req.body) {\n                    throw new Error(\"wrong_credentials\");\n                }\n                VehicleService.updateVehicles();\n                const vehicles = VehicleService.vehicles || [];\n                const findIndex = vehicles.findIndex((i) => i.id === req.params.id_of_vehicle);\n                if (findIndex === -1) {\n                    throw new Error();\n                }\n                delete req.body.id;\n                VehicleService.updateVehicle(vehicles[findIndex].id, req.body);\n                return res.code(200).send({});\n            }\n            catch (error) {\n                if (!error.message) {\n                    return res\n                        .code(500)\n                        .send({ error: \"Internal Server Error\" });\n                }\n                return res\n                    .code(401)\n                    .send({ error: \"Bad Request\", message: error.message });\n            }\n            // FIXME\n        },\n    });\n    next();\n};\nexport default LoginRoute;\n","import path from 'path';\nimport fs from 'fs';\nimport jsYaml from 'js-yaml';\nimport Fastify from 'fastify';\nimport FastifyCors from 'fastify-cors';\nimport FastifyAuth from 'fastify-auth';\nimport FastifyJWT from 'fastify-jwt';\nimport Logger from '@harmonyjs/logger';\nimport AuthenticationService from './services/authentication'\nimport EncryptionService from './services/encryption'\nimport VehicleService from './services/vehicle'\nimport ReadinessRoute from './routes/readiness'\nimport GeneralStatusRoute from './routes/general/status'\nimport GeneralVersionRoute from './routes/general/version'\nimport LoginRoute from './routes/login'\nasync function loadLogger() {\n    return Logger({\n        name: 'ApplicationImport',\n        configuration: {\n            console: true,\n        },\n    });\n}\nasync function loadConfiguration(confPath, logger) {\n    logger.info('Loading configuration');\n    let confAsYaml = null;\n    try {\n        confAsYaml = fs.readFileSync(confPath, 'utf-8');\n    }\n    catch (err) {\n        logger.error('Unable to load configuration. Exiting.');\n        process.exit(0);\n    }\n    const conf = jsYaml.safeLoad(confAsYaml);\n    logger.info('Configuration loaded');\n    return conf.app;\n}\nasync function launchServer(conf, logger) {\n    logger.info('Launching server');\n    const server = Fastify();\n    server.register(FastifyCors);\n    server.register(FastifyAuth);\n    server.register(FastifyJWT, {\n        secret: conf.encryption?.secret,\n        sign: {\n            algorithm: 'HS512',\n            expiresIn: conf.authentication?.expiresIn ? conf.authentication.expiresIn : '1 hour',\n        },\n    });\n    // Readiness endpoint\n    server.route(ReadinessRoute);\n    // Mount general endpoints\n    server.route(GeneralStatusRoute);\n    server.route(GeneralVersionRoute);\n    // Endpoints\n    server.register(LoginRoute);\n    // Add conf\n    server.decorateRequest('conf', conf);\n    // Authenticate methods\n    server.decorate('authenticateAccount', (req, res, done) => AuthenticationService.authenticateAccount({ req, res, done }));\n    await server.listen(conf.server.port, conf.server.host);\n    logger.info(`Server ready at ${conf.server.host}:${conf.server.port}`);\n}\nasync function run() {\n    const logger = await loadLogger();\n    const conf = await loadConfiguration(path.resolve('../conf/application.yml'), logger);\n    // Configure services\n    if (conf.encryption) {\n        EncryptionService.configure(conf.encryption);\n    }\n    if (conf.account) {\n        AuthenticationService.configure(conf.account);\n    }\n    if (conf.vehicles) {\n        VehicleService.configure(conf.vehicles);\n    }\n    await launchServer(conf, logger);\n}\nrun()\n    .catch((err) => {\n    console.error('Fatal error: ');\n    console.error(err);\n    process.exit(-1);\n});\n"],"names":["AuthenticationService","instance","logger","Logger","name","configuration","console","account","configure","authenticateAccount","args","decoded","req","jwtVerify","payload","userId","id","user","Object","assign","res","code","send","statusCode","error","e","message","EncryptionService","secret","encryptPassword","aes256","encrypt","password","salt","toString","comparePassword","decrypt","encrypted","UPDATE_INTERVAL","SPEED_VARIATION","TEMPERATURE_VARIATION","VehicleService","vehicles","initializeVehicles","setInterval","updateVehicles","map","vehicle","coordinates","polyline","decode","line","turf","lineString","options","units","location","along","defaultSpeed","speed","defaultTemperature","temperature","geometry","distance","forEach","online","updatedAt","moment","toISOString","metersTraveled","routeLength","length","minSpeed","maxSpeed","Math","floor","random","minTemp","maxTemp","getDrivers","updateVehicleStatus","status","idx","findIndex","i","updateVehicle","ReadinessRoute","method","url","handler","GeneralStatusRoute","response","environment","GeneralVersionRoute","buildDate","buildVersion","apiVersion","LoginRoute","server","opts","next","route","body","login","Error","conf","isAdmin","token","jwt","sign","preHandler","auth","data","params","id_of_vehicle","plate","loadLogger","loadConfiguration","confPath","info","confAsYaml","fs","readFileSync","err","process","exit","jsYaml","safeLoad","app","launchServer","Fastify","register","FastifyCors","FastifyAuth","FastifyJWT","encryption","algorithm","expiresIn","authentication","decorateRequest","decorate","done","listen","port","host","run","path","resolve","catch"],"mappings":"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"}